name: Deploy

on:
  push:
    paths: 
      - "demo/**"
      - ".github/workflows/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Get repo files
      uses: actions/checkout@v1
     
    - name: Install Terraform
      uses: little-core-labs/install-terraform@v1.0.0
      with:
        version: 0.12.24

    - name: Init Terraform
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: terraform init
    
    - name: Deploy Azure infrastructure
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}  
        TF_VAR_subscription_id: ${{ secrets.subscription_id }}
        TF_VAR_client_id: ${{ secrets.client_id }}
        TF_VAR_client_secret: ${{ secrets.client_secret }}
        TF_VAR_tenant_id: ${{ secrets.tenant_id }}
        TF_VAR_psql_password: ${{ secrets.psql_password }} 
        TF_VAR_vm_password: ${{ secrets.password }} 
        TF_VAR_client_app_id: ${{ secrets.client_app_id }}
        TF_VAR_server_app_id: ${{ secrets.server_app_id }}
        TF_VAR_server_app_secret: ${{ secrets.server_app_secret }}
        TF_VAR_tenant_app_id: ${{ secrets.tenant_app_id }}
      run: terraform apply -auto-approve

    - name: Store Kubernetes config
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: echo "$(terraform output kube_admin_config)" > ./kube_config

    - name: Install Helm 3
      uses: Azure/setup-helm@v1
      with:
        version: v3.1.1

    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      id: install

    - name: Azure CLI login
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID
        az account set -s $ARM_SUBSCRIPTION_ID

    - name: TEMP WORKAROUND - assign kubelet identity to main RG for MIC AAD Pod Identity
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        rgName=$(terraform output resource_group)
        kubeletIdentity=$(az aks show -g $(terraform output resource_group) \
          -n $(terraform output kube_name) \
          --query identityProfile.kubeletidentity.objectId -o tsv)
        az role assignment create --role "Managed Identity Operator" \
          --assignee-object-id $kubeletIdentity \
          -g $rgName
        az role assignment create --role "AcrPull" \
          --assignee-object-id $kubeletIdentity \
          -g $rgName
        az role assignment create --role "Virtual Machine Contributor" \
          --assignee-object-id $kubeletIdentity \
          -g $rgName
        az role assignment create --role "Virtual Machine Contributor" \
          --assignee-object-id $kubeletIdentity \
          -g $rgName-aksresources

    - name: Deploy cluster base configuration
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        password: ${{ secrets.password }} 
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm upgrade -i baseconfig ./helm/cluster \
          --set upn=admin@tomaskubicaoffice.onmicrosoft.com \
          --set username=tomas \
          --set password=${password} \
          --set secretsReader.resourceId=$(terraform output secretsReader_resourceId) \
          --set secretsReader.clientId=$(terraform output secretsReader_clientId)

    - name: Appliction Insights codeless injector
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        if helm list | grep local-forwarder
          then echo Already installed
          else
            sudo apt install dos2unix -y
            wget https://github.com/microsoft/Application-Insights-K8s-Codeless-Attach/releases/download/Beta3/init.sh 
            wget https://github.com/microsoft/Application-Insights-K8s-Codeless-Attach/releases/download/Beta3/helm-v0.8.4.tgz
            . init.sh
            helm upgrade -i local-forwarder ./helm-v0.8.4.tgz -f values.yaml \
              --set namespaces={} \
              --set namespaces[0].target=default \
              --set namespaces[0].iKey=$(terraform output appin_key)
        fi

    - name: Deploy KEDA
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm upgrade -i keda kedacore/keda -n keda

    - name: Deploy DAPR
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm repo add dapr https://daprio.azurecr.io/helm/v1/repo
        helm repo update
        helm install dapr dapr/dapr -n dapr

    - name: Deploy Ingress controller for Azure App Gw
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        helm upgrade -i -n ingress ingress application-gateway-kubernetes-ingress/ingress-azure \
          --set appgw.name=$(terraform output appgw_name) \
          --set appgw.resourceGroup=$(terraform output resource_group) \
          --set appgw.subscriptionId=$ARM_SUBSCRIPTION_ID \
          --set appgw.usePrivateIP=False \
          --set kubernetes.watchNamespace="" \
          --set armAuth.type=aadPodIdentity \
          --set armAuth.identityResourceID=$(terraform output ingressContributor_resource_id) \
          --set armAuth.identityClientID=$(terraform output ingressContributor_client_id) \
          --set rbac.enabled=true

    - name: Deploy Grafana+Prometheus
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        GRAFANA_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        GRAFANA_CLIENT_ID: ${{ secrets.reader_client_id }}
        GRAFANA_CLIENT_SECRET: ${{ secrets.reader_client_secret }}
        GRAFANA_TENANT_ID: ${{ secrets.tenant_id }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm repo add stable https://kubernetes-charts.storage.googleapis.com
        helm repo update
        helm upgrade -i grafana stable/grafana -n grafana -f helm/cluster/grafana-values.yaml \
          --set subscriptionId=$GRAFANA_SUBSCRIPTION_ID \
          --set clientId=$GRAFANA_CLIENT_ID \
          --set clientSecret=$GRAFANA_CLIENT_SECRET \
          --set tenantId=$GRAFANA_TENANT_ID \
          --set workspaceId=$(terraform output workspace_id)
        helm upgrade -i prometheus stable/prometheus -n prometheus -f helm/cluster/prometheus-values.yaml
    
    - name: Build apps
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry=$(terraform output registry_name)
        version=$(cat version)
        az acr repository show -n $registry --image myappspa:$version && echo Image exists || az acr build -r $registry --image myappspa:$version ./src/myappspa
        az acr repository show -n $registry --image myapptodo:$version && echo Image exists || az acr build -r $registry --image myapptodo:$version ./src/myapptodo
        az acr repository show -n $registry --image myappnode:$version && echo Image exists || az acr build -r $registry --image myappnode:$version ./src/myappnode
        az acr repository show -n $registry --image todogen:$version && echo Image exists || az acr build -r $registry --image todogen:$version ./src/todoGen
        az acr repository show -n $registry --image daprdemo:$version && echo Image exists || az acr build -r $registry --image daprdemo:$version ./src/daprdemo

    - name: Deploy todo application to Kubernetes
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i todo ./helm/myapp \
          --set appspa.image.repository=${registry_name}.azurecr.io/myappspa \
          --set appspa.image.tag=$(cat version) \
          --set apptodo.image.repository=${registry_name}.azurecr.io/myapptodo \
          --set apptodo.image.tag=$(cat version) \
          --set appnode.image.repository=${registry_name}.azurecr.io/myappnode \
          --set appnode.image.tag=$(cat version) \
          --set appgen.image.repository=${registry_name}.azurecr.io/todogen \
          --set appgen.image.tag=$(cat version) \
          --set apphost=cloud.tomaskubica.in \
          --set keyvault.name=$(terraform output keyvault_name) \
          --set keyvault.tenant=$(terraform output keyvault_tenantid) \
          --set keyvault.key=$(terraform output keyvault_psql_keyname) \
          --set keyvault.sbkey=servicebus-todo-connection

    - name: Deploy DAPR demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i dapr-demo ./helm/dapr-demo -n dapr-demo \
          --set serviceBus.connectionString=$(terraform output servicebus_dapr_connection) \
          --set eventHub.connectionString=$(terraform output eventhub_connection) \
          --set blob.storageAccount=$(terraform output storage_account) \
          --set blob.key=$(terraform output storage_key) \
          --set blob.container=daprcontainer

    - name: Deploy IIS application to Kubernetes
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm upgrade -i -n windows iis ./helm/windows --set apphost=iis.cloud.tomaskubica.in